#include <iostream>
#include <unistd.h>
#include <sys/wait.h>
#include <cstdlib>
#include <ctime>

const int ARRAY_SIZE = 20;
const int PIPE_READ = 0;
const int PIPE_WRITE = 1;

void fillArray(int arr[]) {
    srand(time(NULL));
    for (int i = 0; i < ARRAY_SIZE; ++i) {
        arr[i] = rand() % 100; 
    }
}

int findMin(int arr[], int start, int end) {
    int min = arr[start];
    for (int i = start + 1; i < end; ++i) {
        if (arr[i] < min) {
            min = arr[i];
        }
    }
    return min;
}

int main() {
    int arr[ARRAY_SIZE];
    int pipefd[2];
    pipe(pipefd);

    fillArray(arr);

    pid_t pid = fork();

    if (pid == 0) {
        // Child process
        close(pipefd[PIPE_READ]);
        int minSecondHalf = findMin(arr, ARRAY_SIZE / 2, ARRAY_SIZE);
        write(pipefd[PIPE_WRITE], &minSecondHalf, sizeof(minSecondHalf));
        close(pipefd[PIPE_WRITE]);
        exit(0);
    } else if (pid > 0) {
        close(pipefd[PIPE_WRITE]);
        int minFirstHalf = findMin(arr, 0, ARRAY_SIZE / 2);

        int minSecondHalf;
        read(pipefd[PIPE_READ], &minSecondHalf, sizeof(minSecondHalf));

        std::cout << "Minimum number in first half (PID " << getpid() << "): " << minFirstHalf << std::endl;
        std::cout << "Minimum number in second half (PID " << pid << "): " << minSecondHalf << std::endl;

        close(pipefd[PIPE_READ]);
        int overallMin = std::min(minFirstHalf, minSecondHalf);
        std::cout << "Overall minimum number in array: " << overallMin << std::endl;

        wait(NULL); 
    } else {
       
        std::cerr << "Fork failed!" << std::endl;
        return 1;
    }

    return 0;
}
